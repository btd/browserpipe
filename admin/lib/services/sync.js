// Generated by CoffeeScript 1.6.3
(function() {
  var BSON, formatDocuments, prettify, tasks, ton, uglify;

  ton = require("mongo-ton");

  uglify = require("uglify-js");

  BSON = require('mongodb').pure().BSON;

  ObjectID = require('mongodb').pure().ObjectID;

  jobs = new (require('../../../jobs/manager'));

  prettify = function(code) {
    var err, ish;
    try {
      ish = uglify.uglify.gen_code(uglify.parser.parse("(" + code + ")"), {
        beautify: true,
        quote_keys: true
      });
      return ish.substring(1, ish.length - 2);
    } catch (_error) {
      err = _error;
      console.log(code, err);
      return "Error parsing JS " + err.message;
    }
  };

  formatSyncUsers = function(results) {
    var res, out, _i, _len;
    out = [];    
    for (_i = 0, _len = results.length; _i < _len; _i++) {      
      res = results[_i];
      out.push({
        _id: res._id,        
        itemCount: res.value.itemCount,
        noScreenshotCount: res.value.noScreenshotCount,
        noFaviconCount: res.value.noFaviconCount
      });
    }
    return out;
  };

  tasks = {
    
    syncinfo: function(command, cb) {

      var map = function () {         
         var noFaviconCount = this.favicon? 0: 1;
         var noScreenshotCount = this.screenshot? 0: 1;
         emit(this.user, {itemCount: 1, noFaviconCount: noFaviconCount, noScreenshotCount: noScreenshotCount});
      };
      var reduce = function (key, values) { 
        var total = 0, totalNoFavicon = 0, totalNoScreenshot = 0;
        values.forEach(function (value) { 
          total += value.itemCount;         
          totalNoFavicon += value.noFaviconCount;
          totalNoScreenshot += value.noScreenshotCount;
        });
        return {
          itemCount: total, 
          noFaviconCount: totalNoFavicon, 
          noScreenshotCount: totalNoScreenshot
        };
      };

      var col = cb.socket.mongo.database.collection("items");
      return col.mapReduce(map, reduce, {
        out: {
          inline: 1
        }
      }, function(err, res, stat) {
        if (err != null) {
          return cb(err);
        }
        return cb(null, formatSyncUsers(res), stat);
      });
    },

    syncFaviconForUSer: function(command, cb) {
      if (command.userId == null) {
        return cb("Missing userId");
      }

      var col = cb.socket.mongo.database.collection("items");
      return col.find({user:  ObjectID.createFromHexString(command.userId)}).toArray(function(err, res) {
        if (err != null) {
          return cb(err);
        }
        if (res == null) {
          return cb(null, []);
        }

        for (_i = 0, _len = res.length; _i < _len; _i++) {
          var item = res[_i];          
          jobs.schedule('check-url', {
            uri: item.url,
            uniqueId: item._id.toString()
          }).on('complete', function() {
              item.favicon = "/screenshots/" + item._id.toString() + "/favicon.ico";              
              col.save(item, cb);
          })
        }

        return cb(null);
      });
    },
    
    syncScreenshotForUSer: function(command, cb) {
      if (command.userId == null) {
        return cb("Missing userId");
      }

      var col = cb.socket.mongo.database.collection("items");
      return col.find({user:  ObjectID.createFromHexString(command.userId)}).toArray(function(err, res) {
        if (err != null) {
          return cb(err);
        }
        if (res == null) {
          return cb(null, []);
        }

        for (_i = 0, _len = res.length; _i < _len; _i++) {
          var item = res[_i];
          jobs.schedule('screenshot', {
            uri: item.url,
            uniqueId: item._id.toString()
          }).on('complete', function() {
              item.screenshot = "/screenshots/" + item._id.toString() + "/screenshot.jpg";            
              col.save(item, cb);
          })
        }

        return cb(null);
      });
    }
  };

  module.exports = function(cb, command) {
    var err;
    if (cb.socket == null) {
      return;
    }
    if (cb.socket.mongo == null) {
      return cb("Not connected");
    }
    if (command == null) {
      return cb("Missing command");
    }
    if (command.type == null) {
      return cb("Missing type");
    }
    if (tasks[command.type] == null) {
      return cb("Invalid command");
    }    
    if ((command.query != null) && typeof command.query === 'string') {
      try {
        command.query = ton.parse(command.query);
      } catch (_error) {
        err = _error;
        return cb(err.message);
      }
    }
    return tasks[command.type](command, cb);
  };

}).call(this);
