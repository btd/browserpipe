// Generated by CoffeeScript 1.6.3
(function() {
  var BSON, formatDocuments, prettify, tasks, ton, uglify;

  ton = require("mongo-ton");

  uglify = require("uglify-js");

  BSON = require('mongodb').pure().BSON;

  prettify = function(code) {
    var err, ish;
    try {
      ish = uglify.uglify.gen_code(uglify.parser.parse("(" + code + ")"), {
        beautify: true,
        quote_keys: true
      });
      return ish.substring(1, ish.length - 2);
    } catch (_error) {
      err = _error;
      console.log(code, err);
      return "Error parsing JS " + err.message;
    }
  };

  formatDocuments = function(res) {
    var doc, out, _i, _len;
    out = [];
    for (_i = 0, _len = res.length; _i < _len; _i++) {
      doc = res[_i];
      out.push({
        _id: doc._id,
        nativeId: doc._id instanceof ObjectID,
        size: BSON.calculateObjectSize(doc, true),
        value: prettify(ton.stringify(doc)),
        doc: doc
      });
    }
    return out;
  };

  tasks = {
    rename: function(col, command, cb) {
      if (command.query == null) {
        return cb("Missing query");
      }
      if (!((command.query.name != null) && typeof command.query.name === 'string' && command.query.name.length > 0)) {
        return cb("Missing name");
      }
      return col.rename(command.query.name, function(err, res) {
        if (err != null) {
          return cb(err);
        }
        if (res == null) {
          return cb("Rename failed");
        }
        return cb();
      });
    },
    empty: function(col, command, cb) {
      return col.remove(function(err, res) {
        if (err != null) {
          return cb(err);
        }
        if (res == null) {
          return cb("Empty failed");
        }
        return cb();
      });
    },
    drop: function(col, command, cb) {
      return col.drop(function(err, res) {
        if (err != null) {
          return cb(err);
        }
        if (res == null) {
          return cb("Drop failed");
        }
        return cb();
      });
    },
    find: function(col, command, cb) {
      if (command.query == null) {
        return cb("Missing query");
      }
      if (command.options == null) {
        command.options = {};
      }
      return col.find(command.query, command.options).toArray(function(err, res) {
        if (err != null) {
          return cb(err);
        }
        if (res == null) {
          return cb(null, []);
        }
        return cb(null, formatDocuments(res));
      });
    },
    
    count: function(col, command, cb) {
      if (command.query == null) {
        return cb("Missing query");
      }
      return col.count(command.query, function(err, res) {
        if (err != null) {
          return cb(err);
        }
        if (res == null) {
          return cb(null, []);
        }
        return cb(null, res);
      });
    },
    mapReduce: function(col, command, cb) {
      var map, reduce, _ref;
      if (command.query == null) {
        return cb("Missing query");
      }
      _ref = command.query, map = _ref.map, reduce = _ref.reduce;
      if (typeof map !== 'function') {
        return cb("Missing map");
      }
      if (typeof reduce !== 'function') {
        return cb("Missing reduce");
      }
      return col.mapReduce(map, reduce, {
        out: {
          inline: 1
        }
      }, function(err, res, stat) {
        if (err != null) {
          return cb(err);
        }
        return cb(null, formatDocuments(res), stat);
      });
    },
    "delete": function(col, command, cb) {
      if (command.query == null) {
        return cb("Missing query");
      }
      if (command.query._id == null) {
        return cb("Missing _id");
      }
      return col.remove({
        _id: command.query._id
      }, function(err, res) {
        if (err != null) {
          return cb(err);
        }
        if (!((res != null) && res > 0)) {
          return cb("Delete failed");
        }
        return cb();
      });
    },
    insert: function(col, command, cb) {
      if (command.query == null) {
        return cb("Missing query");
      }
      return col.insert(command.query, cb);
    },
    update: function(col, command, cb) {
      if (command.query == null) {
        return cb("Missing query");
      }
      if (command.query._id == null) {
        return cb("Missing _id");
      }
      return col.save(command.query, cb);
    }
  };

  module.exports = function(cb, command) {
    var col, err;
    if (cb.socket == null) {
      return;
    }
    if (cb.socket.mongo == null) {
      return cb("Not connected");
    }
    if (command == null) {
      return cb("Missing command");
    }
    if (command.type == null) {
      return cb("Missing type");
    }
    if (command.collection == null) {
      return cb("Missing collection");
    }
    if (tasks[command.type] == null) {
      return cb("Invalid command");
    }
    col = cb.socket.mongo.database.collection(command.collection);
    if ((command.query != null) && typeof command.query === 'string') {
      try {
        command.query = ton.parse(command.query);
      } catch (_error) {
        err = _error;
        return cb(err.message);
      }
    }
    return tasks[command.type](col, command, cb);
  };

}).call(this);
